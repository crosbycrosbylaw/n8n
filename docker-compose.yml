networks:

  frontend:
    external: false
  docassemble:
  backend: 
    external: false

volumes:

  ncdb_data: 
  dabackup:
    external: true
  n8n_data:
    external: true
  

services:

  tunnel:
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
        - TUNNEL_TOKEN=eyJhIjoiZDI1MjE2N2I1ZjUwYjdjODgzZmZhMDQ0NDZiOWJhYzMiLCJ0IjoiZDE1NTQzNDctYWNjNS00YWMzLTgyMTYtODM4NjZkNGFhNmE0IiwicyI6Ik5HRmlOVGcwWVRRdE1XTm1ZaTAwWlRVeExUa3lNVE10TVRRNE5qSTFObVZoTXpVNCJ9
    networks:
        - docassemble
        - frontend  
        - backend

  certbot: 
    command: "certonly --webroot --webroot-path=/var/www/html --email user@example.domain --agree-tos --no-eff-email -d example.domain,www.example.domain,nocodb.example.domain"
    container_name: certbot
    depends_on: 
      - reverse_proxy
    image: certbot/certbot
    volumes: 
      - "./certbot:/etc/letsencrypt"
      - "path/to/webroot:/var/www/html" # For webroot certificate validation
  
  nocodb_app: 
    container_name: nocodb_app
    depends_on: 
      - nocodb_database
    environment: 
      NC_AUTH_JWT_SECRET: "${NC_AUTH_JWT_SECRET}"
      # while it is not good practice to use the Root user, 
      # there were issues with granting privileges to a new user using the Linux server MariaDB image.
      NC_DB: "mysql2://nocodb_database:3306?u=root&p=${MYSQL_ROOT_PASSWORD}&d=${MYSQL_DATABASE}" 
      NC_PUBLIC_URL: "${NC_PUBLIC_URL}"
    image: "nocodb/nocodb:latest"
    networks: 
      - backend
      - frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes: 
      - ncdb_data:/nocodb/data:/usr/app/data
  
  nocodb_database: 
    container_name: nocodb_database
    environment: 
      - MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE
      - MYSQL_USER
      - MYSQL_PASSWORD
    # using the non-official MariaDB image 
    # because it is an alpine distro and has a considerably smaller footprint
    image: "ghcr.io/linuxserver/mariadb:alpine"
    networks: 
      - backend
    restart: always
    volumes: 
      - "./mariadb/config:/config"
      - "./mariadb/data:/var/lib/mysql"
  
  docassemble:
    image: jhpyle/docassemble:latest
    container_name: docassemble
    env_file:
      - .env
    restart: unless-stopped
    stop_grace_period: 6m
    ports:
      - "8082:80"
    volumes:
      - dabackup:/usr/share/docassemble/backup
    networks:
      - docassemble

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "8081:8081"
    environment:
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=8081
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - frontend

  reverse_proxy: 
    container_name: reverse_proxy
    image: "nginx:alpine"
    networks: 
      - frontend
    ports: 
      - "80:80"
      - "443:443"
    restart: unless-stopped
    volumes: 
      - "./certbot:/etc/letsencrypt:ro"             # SSL certs
      - "./nginx:/etc/nginx"                        # Nginx config file
      - "path/to/webroot:/usr/share/nginx/html"     # Mount directory web site files for webroot certificate validation with Certbot
