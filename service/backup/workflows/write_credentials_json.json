[{"createdAt":"2025-10-17T01:11:03.275Z","updatedAt":"2025-10-17T02:14:29.000Z","id":"MmCPsZXUQbO1KAyu","name":"write_credentials_json","active":false,"isArchived":false,"nodes":[{"parameters":{"command":"bun x n8n export:credentials --all --decrypted"},"id":"43e84ce6-f7c6-434e-abeb-8fb843e46275","name":"Execute Command","type":"n8n-nodes-base.executeCommand","position":[208,-48],"typeVersion":1},{"parameters":{"jsCode":"// Function to beautify JSON\nfunction beautifyJson(jsonString) {\n  try {\n    // Parse the JSON string\n    const jsonObject = JSON.parse(jsonString);\n\n    // Format the JSON with indentation\n    return jsonObject; // Return the parsed object directly\n  } catch (error) {\n    // Return the error message if JSON is invalid\n    return `Invalid JSON: ${error.message}`;\n  }\n}\n\n// Retrieve the JSON object from the input data\nconst input = $input.all()[0].json;\n\n// Extract the JSON string from the stdout field\nconst jsonString = input.stdout.match(/\\[{.*}\\]/s);\n\n// Check if a valid JSON string is found\nif (!jsonString) {\n  return {\n    json: {\n      error: \"No valid JSON string found in stdout.\"\n    }\n  };\n}\n\n// Beautify the JSON\nconst beautifiedJson = beautifyJson(jsonString[0]);\n\n// Output the beautified JSON, ensuring each entry is in an object with a 'json' key\nconst output = beautifiedJson.map(entry => ({ json: entry }));\n\n// Return the output\nreturn output;\n"},"id":"981c9b33-3869-4bf3-8f41-72805b32c652","name":"JSON formatting","type":"n8n-nodes-base.code","position":[384,-48],"typeVersion":2},{"parameters":{"content":"### * NEED TO SET REPO INFO MANUALLY\n","height":80,"width":333},"id":"1f4dbae5-ed2c-4aee-9f28-39903eccb1e0","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[368,160]},{"parameters":{"inputSource":"passthrough"},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[16,-48],"id":"47b6bb6e-f356-4a5c-a17d-43db30eb44c0","name":"on_called"},{"parameters":{"workflowId":{"__rl":true,"value":"rodkQF59SypRleOk","mode":"list","cachedResultUrl":"/workflow/rodkQF59SypRleOk","cachedResultName":"write_json_file"},"workflowInputs":{"mappingMode":"defineBelow","value":{"subdirectory":"backup\\credentials","filename":"={{ $json.name.replace(/\\s+/g, \"_\").trim() + \".json\" }}","content":"={{ $json }}"},"matchingColumns":[],"schema":[{"id":"subdirectory","displayName":"subdirectory","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"filename","displayName":"filename","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"content","displayName":"content","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object","removed":false}],"attemptToConvertTypes":true,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.3,"position":[592,-48],"id":"a78a6115-190e-491d-8bb3-7f4792fb85c0","name":"Call 'write_json_file'"}],"connections":{"Execute Command":{"main":[[{"node":"JSON formatting","type":"main","index":0}]]},"JSON formatting":{"main":[[{"node":"Call 'write_json_file'","type":"main","index":0}]]},"on_called":{"main":[[{"node":"Execute Command","type":"main","index":0}]]},"Call 'write_json_file'":{"main":[[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"5caea890-4de7-48bf-b93f-27fd006c6519","triggerCount":0,"shared":[{"createdAt":"2025-10-17T01:11:03.275Z","updatedAt":"2025-10-17T01:11:03.275Z","role":"workflow:owner","workflowId":"MmCPsZXUQbO1KAyu","projectId":"ixpNRE1B5DSjZ1fx"}],"tags":[{"createdAt":"2025-10-17T01:13:09.099Z","updatedAt":"2025-10-17T01:13:09.099Z","id":"VCp81cfqLfblmEUD","name":"backup"}]}]