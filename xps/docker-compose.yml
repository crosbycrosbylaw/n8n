volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:

networks:
  n8n-ai:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['n8n-ai']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_HOST=xps.ccn8n.org
    - N8N_PROTOCOL=https
    - N8N_PORT=5678
    - NODE_ENV=production
    - NODE_FUNCTION_ALLOW_BUILTIN=*
    - NODE_FUNCTION_ALLOW_EXTERNAL=*
    - WEBHOOK_URL=https://xps.ccn8n.org/
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['n8n-ai']
  restart: unless-stopped
  privileged: true
  environment:
    - OLLAMA_ORIGINS=https://llama.ccn8n.org
    - OLLAMA_INTEL_GPU=1
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['n8n-ai']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull granite3-moe:3b-instruct-q6_K"

services:

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: always
    ports:
      - "3000:8080"
    environment:
      - OLLAMA_BASE_URL=https://llama.ccn8n.org
      - WEBUI_AUTH=False
    networks:
      - n8n-ai
    volumes:
      - open-webui:/app/backend/data

  tunnel:
    image: cloudflare/cloudflared:latest
    container_name: "cf-tunnel"
    restart: unless-stopped
    command: tunnel run
    environment:
        - TUNNEL_TOKEN=eyJhIjoiZDI1MjE2N2I1ZjUwYjdjODgzZmZhMDQ0NDZiOWJhYzMiLCJ0IjoiODRiNmRhZjMtYTU3MC00Y2MyLWE1ODYtZTFjYzE5MTBlMmU3IiwicyI6IlptUXhPRFl4T1dRdE9EWmlNUzAwTjJaaExUazVZbVF0T1dVeVpqVTVOekJsTURBNCJ9
    networks:
        - n8n-ai

  postgres:
    image: postgres:16-alpine
    networks: ['n8n-ai']
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    privileged: true
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['n8n-ai']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    privileged: true
    profiles: ["gpu"]
    <<: *service-ollama

  ollama-pull-llama-cpu:
    profiles: ["gpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

