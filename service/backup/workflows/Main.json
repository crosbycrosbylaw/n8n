[{"createdAt":"2025-10-15T20:14:55.680Z","updatedAt":"2025-10-15T20:14:55.680Z","id":"uZoMMZYsvpgIUMMa","name":"Main","active":false,"isArchived":false,"nodes":[{"parameters":{"method":"POST","url":"={{ $json.link }}","sendBody":true,"contentType":"form-urlencoded","bodyParameters":{"parameters":[{"name":"__LASTFOCUS"},{"name":"__EVENTTARGET"},{"name":"__EVENTARGUMENT"},{"name":"__VIEWSTATE","value":"={{ $json.data.__viewstate }}"},{"name":"__VIEWSTATEGENERATOR","value":"={{ $json.data.__viewstategenerator }}"},{"name":"__EVENTVALIDATION","value":"={{ $json.data.__eventvalidation }}"},{"name":"emailAddress","value":"={{ $json.data.emailAddress }}"},{"name":"SubmitEmailAddressButton","value":"Validate"},{"name":"username","value":"={{ $json.data.emailAddress }}"},{"name":"SubmitUsernameButton","value":"={{ $json.data.emailAddress }}"}]},"options":{"response":{"response":{"fullResponse":true}}}},"id":"cbab382b-de64-4f07-9854-1e23e397875b","name":"POST","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[688,752]},{"parameters":{"url":"={{ $json.link }}","options":{}},"id":"4e931fa8-5633-4c79-9d33-928d6af33ed2","name":"GET","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-336,672]},{"parameters":{"pollTimes":{"item":[{"mode":"everyMinute"}]},"output":"fields","fields":["body"],"filters":{"foldersToInclude":["AAMkADhiNjEzMzg1LTA4MTUtNDc5Zi04MDQzLTY0ZDMzZWM0M2JkNQAuAAAAAAA9tdLGRf1DT6IA2HuobF7PAQBzxYPmhrKPRpPw-mKbCd_4AAKtM5uAAAA="]},"options":{}},"id":"2c3bca92-422c-4548-beb2-cc4c44374289","name":"On Email Received","type":"n8n-nodes-base.microsoftOutlookTrigger","typeVersion":1,"position":[-752,496],"credentials":{"microsoftOutlookOAuth2Api":{"id":"IQ02viLn0rWxHgiU","name":"outlook [eservice]"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Parse Response').item.json.links.length > 1 }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"renameOutput":true,"outputKey":"Multiple Files"}]},"options":{"fallbackOutput":"extra"}},"id":"4a38226d-7e65-4114-9b8f-614f1054cf7a","name":"File Count Router","type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[320,672]},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"pathLower"}]},"options":{}},"id":"6dd3b773-b81d-4b86-af38-e09e7a4714af","name":"Collect Paths","type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[320,208]},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"id":"57aa4bde-8db8-4acf-aa9e-7999c8605f3c","name":"WaitForMerge","type":"n8n-nodes-base.merge","typeVersion":3,"position":[-112,448]},{"parameters":{"operation":"pdf","options":{}},"id":"ca517649-cc5a-45c5-b07e-da7c5aa91b94","name":"Extract Text","type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[96,448]},{"parameters":{"jsCode":"body_in = $input.first().json.text.toLowerCase();\n  //console.log(body_in);\n\nfunction isAlpha(ch) {\n  return /^[A-Za-z]{1,1}$/.test(ch)\n}\n\nfunction removeNonAlpha(chunk, type) {\n  var digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  if (type == 'probate') return chunk;\n  var new_chunk = '';\n  for (var c in chunk) {\n    \n    if (c > 0) var prev = chunk[c - 1];\n    if (c < chunk.length) var next = chunk[c + 1];\n\n    var char = chunk[c];\n    if ((!isAlpha(chunk[c]))) {\n      if (!(isAlpha(next) || (isAlpha(prev))) || (next == '.')) {\n        char = ' ';\n      }\n      if (!(chunk[c] == '-' || (digits.includes(chunk[c])))) {\n        char = ' ';\n      }\n    }\n    if (chunk[c] == ' ' && next == ' ' && prev == ' ') continue;\n    new_chunk += char;\n  }\n\n  //console.log(new_chunk);\n\n  return new_chunk;\n}\n\nfunction findSep(seps, trim) {\n  for (var s in seps) {\n    if (trim.includes(seps[s])) {\n      var separ = seps[s];\n      break;\n    }\n  }\n  return separ;\n}\n\nfunction reduce(_name) {\n  _name.sort((a, b) => b.length - a.length);\n    console.log('Sorted Array to Reduce:' + _name.join(' | '));\n  while (_name.length > 2) _name.pop();\n\n  return _name;\n}\n\nfunction replaceGivenThenPush(curr_name, to_reps, reps, names) {\n  names.push(replaceGiven(curr_name, to_reps, reps));\n  names.push(replaceGiven(curr_name, to_reps, reps).split(' ').reverse().join(', '));\n  return names;\n}\n\nfunction replaceGiven(curr_, to_reps, reps) {\n  for (var r in to_reps) curr_ = curr_.toString().replace(to_reps[r], reps[r]);\n  return curr_;\n}\n\nfunction capitalizeFirst(curr_name) {\n  for (var q = 0; q < curr_name.length; q++) {\n    curr_name[q] = (curr_name[q][0].toUpperCase() + curr_name[q].slice(1)).trim().replaceAll(',', '');\n  }\n  return curr_name;\n}\n\nfunction setup() {\n  //console.log('hit setup--> n =', n);\n  var _body = body_in;\n\n  var _data = {\n    split_on:\n      ':',\n    pre_line:\n      false,\n    matter_type:\n      'none'\n  }\n\n  var keywords = {\n    divorce:\n      ['marriage', 'dissolution of marriage'],\n    adoption:\n      ['adoption', 'adopt', 'to be adopted'],\n    probate:\n      ['estate', 'deceased', 'heirship'],\n  }\n\n  for (var k in keywords) {\n    for (var i in keywords[k]) {\n      if (_body.includes(keywords[k][i])) {\n        _data.matter_type = k;\n          console.log('Matter Type = ' + _data.matter_type);\n        break;\n      }\n    }\n  }\n\n  if (_body.includes('marriage of')) {\n    _data.split_on = 'marriage of:';\n  } else if (_body.includes('adoption of')) {\n    _data.split_on = 'adoption of:';\n  } else if (_body.includes('estate of')) {\n    _data.split_on = 'estate of:';\n  } else if (_body.includes('matter of')) {\n    _data.split_on = 'matter of:';\n  }\n    console.log('Split Value = ' + _data.split_on);\n    console.log('Matter Type = ' + _data.matter_type);\n  if (_body.includes('in re')) {\n    _data.pre_line = true;\n  }\n    //console.log('Has Pre Line = ' + _data.pre_line);\n  return [_data, _body];\n}\n\nfunction noPreLine(body) {\n  //TO DO: this entire function ...\n  var names = [];\n  body = removeNonAlpha(body.replaceAll('crosby & crosby', '').replaceAll('county of', '').replaceAll('judicial circuit', '').replaceAll('state of illinois', 'soi').replaceAll('in the circuit court of the', 'cc').replaceAll('res ondent', 'respondent'));\n  var _seps = [' & ', 'name', ' vs ', ' v '];\n  var irreg_separ = findSep(_seps, body);\n    console.log(irreg_separ, body);\n  switch (irreg_separ) {\n    case ' v ':\n    case ' vs ':\n    case ' & ':\n      var _reps = [\n        ',', \n        'petitioner',\n        'respondent',\n        'february',\n        'cc-',\n        'winnebago',\n        ' case no ',\n        ' op '\n      ];\n      var rep_vals = [\n        ', ',\n        'P',\n        'R',\n        '0',\n        '0',\n        'W',\n        '',\n        ''\n      ];\n      body = replaceGiven(removeNonAlpha(body, _reps, rep_vals), _reps, rep_vals);\n      var arr = [(body.split(irreg_separ)[0]).split(' ').reverse().join(' '), body.split(irreg_separ)[1]];\n\n      for (var half in arr) {\n        var curr_arr = arr[half].split(' ');\n        if (curr_arr.length > 100) for (var i = curr_arr.length; i > 10; i--) curr_arr.pop();\n          console.log('Curr_Arr = ' + curr_arr)\n        var curr_name = reduce(curr_arr);\n          console.log('CURRNAME: ' + curr_name);      \n        curr_name = capitalizeFirst(curr_name);\n        names = replaceGivenThenPush(curr_name, _reps, rep_vals, names);\n      }\n      console.log(\"160 [body = ]: \" + body);\n      break;\n    case 'name':\n      names.push(['x, y']);\n      console.log(\"164 [names = ]: \" + names);\n      break;\n    case 'page':\n      names.push(['x, y']);\n      break;\n    default:\n      names.push(['x, y']);\n      break;\n  }\n\n  return names;\n}\n\nfunction withPreLine(body, data) {\n  //break body into smaller parts for efficiency\n  var _trim = body.split(data.split_on)[1];\n  var type = data.matter_type;\n  //create empty array to store names in\n  var names = [];\n\n  switch (type) {\n\n    case 'divorce':\n      var _seps = ['vs.', 'v. ', ' vs ', ' v ', 'vs', 'v'];\n      var _reps = ['petitioner', '\\n', 'respondent', 'case no', 'ndent', 'february', 'cc-'];\n      var rep_vals = ['', '', 'E', '', 'E', 'feb', ''];\n\n      var _size = 2;\n\n      break;\n\n    case 'adoption':\n      var _seps = [' and ', 'and ', ' and'];\n      var _reps = ['\\n', ')', 'petitioner', 'petitioner', 'case no.'];\n      var rep_vals = ['', '', '', '', ''];\n\n      var _size = 2;\n\n      break;\n\n    case 'probate':\n      var _seps = ['his', 'her', ' and '];\n      var _reps = [''];\n      var rep_vals = [''];\n\n      var count = 0;\n      var _nums = false;\n\n      for (var c in _trim) {\n        if (_trim[c] == '.') {\n          if (!isAlpha(_trim[c - 1])) count++;\n          _nums = true;\n        }\n      }\n\n      if (_nums) var _size = count;\n      else var _size = 1;\n\n      break;\n\n    default:\n      var _seps = ['vs.', 'v.', ' vs ', ' v ', 'vs', 'P'];\n      var _reps = [ 'february', 'cc-', 'respondent', 'petitioner'];\n      var rep_vals = [ 'feb', '', 'R', 'P'];\n      \n  }\n\n  console.log(type, _size);\n\n  //find and return name separator\n  \n  for (var x in _reps) {\n    if (_trim.includes(_reps[x])) {\n      _trim = _trim.replaceAll(_reps[x], rep_vals[x]);\n    }\n  }\n  var separ = findSep(_seps, _trim);\nconsole.log('Separator = ' + separ);\nconsole.log('Trim = ' + _trim)\n  //split txt on separator to isolate different names\n  var _chunks = _trim.split(separ);\nconsole.log('Chunks Size = ' + _chunks.length)\n  set_types = ['divorce', 'adoption', 'probate'];\n  \n  if (!set_types.includes(type)) _size = _chunks.length;\n  //extract each name from their respective chunk\n  for (var n = 0; n <= _size; n++) {\n      \n    _chunks[n] = removeNonAlpha(_chunks[n], type);\nconsole.log('Chunk[' + n + '] =  ' + _chunks[n]);\n\n    if (!_chunks[n] || _chunks[n] == \"\") continue;\n    if (_chunks[n].includes('R')) _chunks[n] = _chunks[n].split('R')[0];\n    switch (type) {\n\n      case 'divorce':\n        if (n == _size) continue;\n\n        var curr_name = _chunks[n].slice(0, _chunks[n].indexOf('E')).split(' ');\n        break;\n\n      case 'adoption':\n        if (n == _size) continue;\n\n        var curr_name = _chunks[n].split(' ');\n        break;\n\n      case 'probate':\n        switch (_size) {\n          case 1:\n            //TO DO: add logic to handle cases where there is a single name\n            var estate_name = _chunks[n].split('deceased')[0].split(' ');\n            for (n in estate_name) {\n              \n            }\n            break;\n          default:\n            if (n == 0) continue;\n            var curr_name = _chunks.find(x => x.includes(n.toString().concat('.'))).split(n.toString().concat('.'))[1].split(' ');;\n\n        }\n        break;\n\n      default:\n        var curr_name = _chunks[n].replaceAll('\\n', ' ').split(' ');\n    }\n\n    curr_name = reduce(curr_name);\n\n    console.log(curr_name, '\\n\\n', curr_name.length, n);\n\n    curr_name = capitalizeFirst(curr_name);\n\n    var _rep2 = [\n      ','\n    ];\n    var rep_v2 = [\n      ', '\n    ];\n\n    names = replaceGivenThenPush(curr_name, _rep2, rep_v2, names);\n    \n  }\n\n for (n in names) if (names[n].endsWith(',')) {\n    names[n] = names[n].slice(0, -1);\n  }\n  return names;\n}\n\nfunction main(setup_result) {\n  if (setup_result[0].pre_line == true) return withPreLine(setup_result[1], setup_result[0]);\n    console.log('Using Function: noPreLine');\n  return noPreLine(setup_result[1]);\n}\n\nvar c_error = 'none';\nvar res = main(setup());\nif (res[0][0] == '' && res.length == 1) c_error = 'err: names not found';\nfor (n in res) if (res[n].at(-1) == ',') res[n] = res[n].slice(0, -1);\noutput = {\n  names:\n     res,\n  catch_error:\n    c_error\n}\n\nconsole.log(output.names);\n\nreturn output;\n\n"},"id":"a38a5f99-b0a8-422c-ac7f-c7238f431859","name":"Parse Names","type":"n8n-nodes-base.code","typeVersion":2,"position":[320,448]},{"parameters":{"authentication":"oAuth2","resource":"folder","operation":"list","path":"=/Clio/{{ $json.names.replaceAll('Jorge, Baeza', 'Ramires Baeza, Jorge (GEORGE)').replaceAll('Bittner, Joshua', 'Bittner, Josh')}}","limit":1,"filters":{}},"id":"ec43237d-8108-497c-b284-7b1e93468fa2","name":"Find Folder Paths","type":"n8n-nodes-base.dropbox","typeVersion":1,"position":[96,208],"alwaysOutputData":true,"retryOnFail":false,"credentials":{"dropboxOAuth2Api":{"id":"dw6p2EgapsTjWrAP","name":"dbx [zramdass]"}},"onError":"continueRegularOutput"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"fe9b1641-5ee2-40d2-94f8-870f0ac15cf2","leftValue":"={{ $json.hasField('pathLower') && \n$json.pathLower.isNotEmpty() && $json.pathLower[0].includes('-')\n}}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}},{"id":"02bb9a14-9601-431a-b6cc-b75017af91be","leftValue":"={{ $json.hasField('path_lower') &&  $json.path_lower.isNotEmpty() && $json.path_lower[0].includes('-') }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"or"},"looseTypeValidation":true,"options":{}},"id":"5c73c7bb-8c66-46f0-9a0b-f8a01713dfaa","name":"Validate","type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[528,496],"alwaysOutputData":true},{"parameters":{"keep":"lastItems"},"id":"ddc19121-a903-42b1-90ef-f1268e8517f5","name":"Paths to Path","type":"n8n-nodes-base.limit","typeVersion":1,"position":[928,496]},{"parameters":{"assignments":{"assignments":[{"id":"011a54f4-1d44-4eed-afb7-eb636dadbd76","name":"=headers[\"content-disposition\"]","value":"={{ $json.headers[\"content-disposition\"].replace('.pdf', ' - amended.pdf')}}","type":"string"}]},"includeOtherFields":true,"options":{}},"id":"626fb928-38c9-45f6-9e5b-bfcda31ce000","name":"Add Amended","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1280,448]},{"parameters":{"authentication":"oAuth2","path":"={{ $json.pathLower }}/[FS] {{ $json.headers[\"content-disposition\"].split('\\\"')[1].replace(' (1)', '').replace('(1)', '').replace('-Signed', '').replace('-signed', '') }}","binaryData":true,"binaryPropertyName":"=data"},"id":"296678c5-7c36-4ede-a20e-b71750d4271f","name":"Upload File","type":"n8n-nodes-base.dropbox","typeVersion":1,"position":[1472,448],"retryOnFail":false,"maxTries":5,"waitBetweenTries":300,"credentials":{"dropboxOAuth2Api":{"id":"dw6p2EgapsTjWrAP","name":"dbx [zramdass]"}},"onError":"continueErrorOutput"},{"parameters":{"fieldToSplitOut":"=links","include":"allOtherFields","options":{"destinationFieldName":"link"}},"id":"8d16e32e-2138-4290-850d-21a228936031","name":"Split Links","type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[96,672]},{"parameters":{"fieldToSplitOut":"=names","options":{"destinationFieldName":"names","includeBinary":true}},"id":"6adb7e0b-3061-43f2-ad59-ebafc03627e3","name":"Split Names","type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-112,208]},{"parameters":{"jsCode":"const items = $input.all();\n//parse response data\nconst extractedData = items.map((item) => {\n  const data = item?.json?.data;\n  const viewstateMatch = data.match(/id=\"__VIEWSTATE\" value=\"([^\"]*)\"/);\n  const viewstategeneratorMatch = data.match(\n    /id=\"__VIEWSTATEGENERATOR\" value=\"([^\"]*)\"/,\n  );\n  const eventvalidationMatch = data.match(\n    /id=\"__EVENTVALIDATION\" value=\"([^\"]*)\"/,\n  );\n  const linkSuffixMatch = data.match(\n    /action=\".([^\"]*)\"/,\n  );\n\n  linkSuff = linkSuffixMatch[1].toString().replaceAll(';', '').replaceAll('amp', '');\n\n  \n  if (!data.toLowerCase().includes('odyssey')) {\n    \n    link = $('Parse Link').first().json.link;\n    link_pre = link.split('/V').at(0);\n    link = ''.concat(link_pre, linkSuff);\n    \n  } else {\n    \n    link = $('Parse Link').first().json.link;\n    link_pre = link.split('/V').at(0);\n    lbody = data.split('<a href=\\\"');\n    lbody.shift();\n    len = lbody.length\n    \n    links = [];\n\n    for (i = 0; i < len; i++) {\n      add = ''.concat(link_pre, lbody[i].split('\\\"').at(0).replaceAll(';', '').replaceAll('amp', ''));\n     // console.log(add);\n      links.push(add);\n    }\n    return {\n      links:\n        links,\n      data: {\n        emailAddress:\n          'eservice@crosbyandcrosbylaw.com',\n        __viewstate: viewstateMatch ? viewstateMatch[1] : null,\n        __viewstategenerator: viewstategeneratorMatch\n          ? viewstategeneratorMatch[1]\n          : null,\n        __eventvalidation: eventvalidationMatch ? eventvalidationMatch[1] : null,\n      }\n    };\n  }\n  \n  \n  return {\n    links:\n      [link],\n    data: {\n      emailAddress:\n        'eservice@crosbyandcrosbylaw.com',\n      __viewstate: viewstateMatch ? viewstateMatch[1] : null,\n      __viewstategenerator: viewstategeneratorMatch\n        ? viewstategeneratorMatch[1]\n        : null,\n      __eventvalidation: eventvalidationMatch ? eventvalidationMatch[1] : null,\n    }\n  };\n});\n\nreturn extractedData;\n"},"id":"2899ba26-ef71-459c-a74d-e73945a9fc7b","name":"Parse Response","type":"n8n-nodes-base.code","typeVersion":2,"position":[-112,672]},{"parameters":{"jsCode":"\n//assign var body to email body content\nbody = $input.last().json.body['content'];\n\n//get file URL from email body\nspl_body = body.split(\"copy this URL into your browser's address bar to view the document: <br>\").at(1);\nidx = spl_body.indexOf('<');\n\n//return URL\nlink = spl_body.substring(0, idx).replaceAll(';', '').replaceAll('amp', '');\n\n\n\nreturn { link };\n"},"id":"1a2f9be1-36b5-4386-8419-121d59913b7d","name":"Parse Link","type":"n8n-nodes-base.code","typeVersion":2,"position":[-672,800]},{"parameters":{"jsCode":"body = $input.last().json.body[\"content\"].toLowerCase();\n\nrepl_vals = [\n  ['in the matter of: ', 'envelope number: '], \n  [': _first _last vs.', '</td>']\n];\n\nfor (i in repl_vals[0]) {\n  body = body.replaceAll(repl_vals[0][i], repl_vals[1][i]);\n}\n\nbody_to_arr = body.split('</td>');\nnames = [];\n_fs = [];\n_ls = [];\n\n//extract portion of text with case names\nfound_names = false;\n\nfor (i = 1; i < body_to_arr.length - 1; i++) {\n  \n  //console.log(body_to_arr[i]);\n  txt = body_to_arr[i];\n  \n  if (!txt.includes('name') && !txt.includes('case style')) {\n    found_names = false;\n    continue;\n  }\n\n  txt = txt.slice(txt.lastIndexOf(':')  + 1, txt.lastIndexOf('<')).trim();\n  if (txt.includes('confidential')) break;\n  \n  found_names = true;\n  break;\n}\n\n//find parseable name separator\n_seps = [\n  'vs.', 'v.', ' vs ', ' v ', 'vs', 'v', 'and'\n];\nfound_sep = false;\n\n//check text is parseable\nif (found_names) {\n\n  for (s in _seps) {\n    separ = _seps[s];\n\n    if (txt.includes(separ)) {\n      found_sep = true;\n      break;\n    }\n\n    found_sep = false;\n  }\n\n  //check proper parsing \n  if (found_sep) {\n    \n    narr = txt.split(separ);\n    \n    //parse names through various format types & return names as [First Name, Last Name]\n    for (j = 0; j < narr.length; j++) { \n        console.log('\\n\\n << [FOR j = '+j+'] >> ' + narr[j]);\n      curr_name = narr[j].replace(', ', ' ').trim().split(' ');\n      //if (curr_name[0].includes(',')) curr_name = curr_name.reverse();\n      \n        //console.log('filtered current name: ' + curr_name);\n      while (curr_name.length > 3) {\n        curr_name.pop();\n      }\n        //console.log('reduced current name: ' + curr_name)\n      for (q = 0; q < curr_name.length; q++) {\n        curr_name[q] = (curr_name[q][0].toUpperCase() + curr_name[q].slice(1)).trim().replaceAll(',', '');\n      }\n\n        console.log('\\n\\n << [Processed Name] >> ' + curr_name.join(' | '));\n      mn_flag = false;\n      if (curr_name.length == 3) {\n        mid = curr_name[1];\n        last = curr_name.pop();\n        first = curr_name.shift();\n        curr_name = [first, last];\n        mn_flag = true;\n      }\n        console.log('\\n\\n << [Middle Name ?] >> ' + mn_flag);\n      \n      names.push(curr_name.toString().replace(',', ', '));\n      names.push(curr_name.reverse().toString().replace(',', ', '));\n      if (mn_flag) {\n        names.push(mid+', '+last);\n        names.push(last+', '+ mid);\n        names.push(first+', '+mid);\n        names.push(mid+', '+first);\n      }\n      _fs.push(curr_name[0]);\n      _ls.push(curr_name[1]);\n    }\n  }\n}\n\nparse_file = !(found_names && found_sep)\n\n  console.log(\n    '\\n\\n << [Found Names ?] >> ' +\n    found_names,\n    '\\n << [Found Separator ?] >> ' +\n    found_sep,\n    '\\n << [Names] >> \\n --- \\n |' +\n    names.join('|\\n --- \\n |') + '|\\n ---'\n  );\n\nreturn {\n  catch_error:\n    parse_file,\n  names:\n    names\n}\n\n"},"id":"07df3e76-2872-4bc7-8e40-0687fb7e4603","name":"Parse Names (Email)","type":"n8n-nodes-base.code","typeVersion":2,"position":[-672,208]},{"parameters":{"resource":"fileFolder","queryString":"=[{{ $now.format('D') }}] - FS Upload Log","limit":1,"filter":{"folderId":{"__rl":true,"value":"1tTCPLjTQTzKpEdC9FIBmZcL7WMBtg5iT","mode":"list","cachedResultName":"FS Daily Upload Logs","cachedResultUrl":"https://drive.google.com/drive/folders/1tTCPLjTQTzKpEdC9FIBmZcL7WMBtg5iT"}},"options":{"fields":["id"]}},"id":"4225c941-3767-4569-b9c4-0c192a1e9c36","name":"Get Log ID","type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[1136,976],"executeOnce":true,"credentials":{"googleDriveOAuth2Api":{"id":"BqXKeIPc7ETbnWCr","name":"gdrive [ramdasszayn]"}}},{"parameters":{"assignments":{"assignments":[{"id":"ca5e80e4-46de-4cca-8dc5-46aa9d4bb172","name":"error","value":"={{ false }}","type":"boolean"},{"id":"e9f71212-9c68-4873-92f3-1371c31ea059","name":"disp_num","value":"={{ $json.path_display.split('/').reverse()[1] }}","type":"string"},{"id":"268e0400-32cb-4f2d-ad8a-dad9c91ce561","name":"c_name","value":"={{ $json.path_display.split('/').reverse()[1].split('-')[1].split(',').reverse().join(' ').trim() }}","type":"string"},{"id":"4d155d6d-0632-4edd-9da5-2813f783e37d","name":"time","value":"={{ $json.server_modified.toDateTime().setZone('America/Chicago').format('tt') }}","type":"string"}]},"includeOtherFields":true,"include":"except","excludeFields":"id","options":{}},"id":"5a9e4e21-9e29-42d5-a2cd-8c5ab29ae4e5","name":"Set Success Fields","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1456,960]},{"parameters":{"assignments":{"assignments":[{"id":"ca5e80e4-46de-4cca-8dc5-46aa9d4bb172","name":"error","value":"={{ true }}","type":"boolean"},{"id":"4d155d6d-0632-4edd-9da5-2813f783e37d","name":"time","value":"={{ $now.setZone('America/Chicago').format('tt') }}","type":"string"}]},"includeOtherFields":true,"include":"except","excludeFields":"id","options":{}},"id":"cc1b3459-d1bc-410f-817a-edd9ecd7b1e4","name":"Set Error Fields","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1456,1136]},{"parameters":{"operation":"appendOrUpdate","documentId":{"__rl":true,"value":"={{ $json.id }}","mode":"id"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"F/S Upload Database","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1xxguhkD14_ut_aj1b344mI44BsesgpQapuwAApPJbfs/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"Display Number":"={{ $json.disp_num }}","File Name":"={{ $json.name }}","Upload Time":"={{ $json.time }}","Action Needed":"={{ $json.error }}"},"matchingColumns":["File Name"],"schema":[{"id":"Display Number","displayName":"Display Number","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"File Name","displayName":"File Name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Upload Time","displayName":"Upload Time","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Action Needed","displayName":"Action Needed","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}]},"options":{}},"id":"06b74d47-5047-4ac0-ba8e-9702335c30d0","name":"Log Successful Upload","type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[-432,368],"credentials":{"googleSheetsOAuth2Api":{"id":"4LRgDhfNzSsMKby7","name":"gsheets [ramdasszayn]"}}},{"parameters":{"operation":"append","documentId":{"__rl":true,"value":"={{ $json.id }}","mode":"id"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"F/S Upload Database","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1xxguhkD14_ut_aj1b344mI44BsesgpQapuwAApPJbfs/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"Display Number":"=UNKNOWN; CANNOT READ FILE","Upload Time":"={{ $json.time }}","Action Needed":"={{ $json.error }}","File Name":"=ERROR : Please retrieve the document from \"{{$('Parse Link').item.json.link}}\""},"matchingColumns":["File Name"],"schema":[{"id":"Display Number","displayName":"Display Number","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"File Name","displayName":"File Name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Upload Time","displayName":"Upload Time","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Action Needed","displayName":"Action Needed","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true}]},"options":{}},"id":"5106b033-8eb1-45e5-84f7-dc2ca0e3cbf1","name":"Log Failed Upload","type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[1872,1040],"credentials":{"googleSheetsOAuth2Api":{"id":"4LRgDhfNzSsMKby7","name":"gsheets [ramdasszayn]"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.error }}","rightValue":"","operator":{"type":"boolean","operation":"false","singleValue":true}}],"combinator":"and"},"renameOutput":true,"outputKey":"Pass"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"7fddcdae-026f-4d15-9aba-d240c619ab30","leftValue":"={{ $json.error }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"renameOutput":true,"outputKey":"Fail"}]},"options":{}},"id":"1ec9a8b8-5f79-42f2-9bff-00acc09bf8cb","name":"Switch","type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[1776,496]},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.pathLower.isNotEmpty() }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"renameOutput":true,"outputKey":"valid"}]},"options":{"fallbackOutput":"extra","renameFallbackOutput":"Parse File"}},"id":"ea5faaf4-a808-4a54-a106-5f7b2063318a","name":"Folder isFound","type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[512,208]},{"parameters":{"mode":"combine","combineBy":"combineAll","options":{}},"id":"66efc535-7773-4cbe-a15e-1481c2edfad6","name":"Merge File Info / Data","type":"n8n-nodes-base.merge","typeVersion":3,"position":[1040,720]},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"leftValue":"={{ $json.catch_error }}","rightValue":"false","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Valid"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"2d052021-0c21-4de0-9af9-a4ac84fa16ea","leftValue":"={{ $json.catch_error}}","rightValue":"true","operator":{"type":"string","operation":"equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Invalid"}]},"looseTypeValidation":true,"options":{}},"id":"50de454e-9fff-4699-a424-57441ee2eee2","name":"Are Names Valid","type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-192,-32]},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ ($('On Email Received').isExecuted && $('On Email Received').last().json.body.content.toLowerCase().includes('amended')) && !$json.headers['content-disposition'].toLowerCase().includes('amended') }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"renameOutput":true,"outputKey":"amend"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"0d6b4fec-bb24-488e-8076-b30cf1110ed4","leftValue":"={{ ($('On Email Received').isExecuted && $('On Email Received').last().json.body.content.toLowerCase().includes('amended')) && !$json.headers['content-disposition'].toLowerCase().includes('amended')  }}","rightValue":"","operator":{"type":"boolean","operation":"false","singleValue":true}}],"combinator":"and"},"renameOutput":true,"outputKey":"continue"}]},"options":{}},"id":"9a62b202-b254-4de6-8b60-5273775b701c","name":"needsAmended","type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[1232,720]},{"parameters":{"mode":"combine","combineBy":"combineAll","options":{}},"id":"83681d10-20a0-4d5b-9b4e-6cccbaeba550","name":"Merge","type":"n8n-nodes-base.merge","typeVersion":3,"position":[1680,768],"executeOnce":false}],"connections":{"POST":{"main":[[{"node":"WaitForMerge","type":"main","index":1},{"node":"Merge File Info / Data","type":"main","index":1}]]},"GET":{"main":[[{"node":"Parse Response","type":"main","index":0}]]},"On Email Received":{"main":[[{"node":"Parse Names (Email)","type":"main","index":0},{"node":"Parse Link","type":"main","index":0}]]},"File Count Router":{"main":[[{"node":"GET","type":"main","index":0}],[{"node":"POST","type":"main","index":0}]]},"Collect Paths":{"main":[[{"node":"Folder isFound","type":"main","index":0}]]},"WaitForMerge":{"main":[[{"node":"Extract Text","type":"main","index":0}]]},"Find Folder Paths":{"main":[[{"node":"Collect Paths","type":"main","index":0}]]},"Validate":{"main":[[{"node":"Paths to Path","type":"main","index":0}]]},"Paths to Path":{"main":[[{"node":"Merge File Info / Data","type":"main","index":0}]]},"Add Amended":{"main":[[{"node":"Upload File","type":"main","index":0}]]},"Upload File":{"main":[[{"node":"Set Success Fields","type":"main","index":0}],[{"node":"Set Error Fields","type":"main","index":0}]]},"Split Links":{"main":[[{"node":"File Count Router","type":"main","index":0}]]},"Split Names":{"main":[[{"node":"Find Folder Paths","type":"main","index":0}]]},"Parse Response":{"main":[[{"node":"Split Links","type":"main","index":0}]]},"Parse Link":{"main":[[{"node":"GET","type":"main","index":0}]]},"Parse Names (Email)":{"main":[[{"node":"Are Names Valid","type":"main","index":0}]]},"Get Log ID":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Set Success Fields":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Set Error Fields":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Extract Text":{"main":[[{"node":"Parse Names","type":"main","index":0}]]},"Parse Names":{"main":[[{"node":"Split Names","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Log Successful Upload","type":"main","index":0}],[{"node":"Log Failed Upload","type":"main","index":0}]]},"Folder isFound":{"main":[[{"node":"Validate","type":"main","index":0}],[{"node":"WaitForMerge","type":"main","index":0}]]},"Merge File Info / Data":{"main":[[{"node":"needsAmended","type":"main","index":0},{"node":"Get Log ID","type":"main","index":0}]]},"Are Names Valid":{"main":[[{"node":"Split Names","type":"main","index":0}],[{"node":"WaitForMerge","type":"main","index":0}]]},"needsAmended":{"main":[[{"node":"Add Amended","type":"main","index":0}],[{"node":"Upload File","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Switch","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"34833bf6-90f7-4079-9b45-42f11dd9c2c2","triggerCount":0,"shared":[{"createdAt":"2025-10-15T20:14:55.680Z","updatedAt":"2025-10-15T20:14:55.680Z","role":"workflow:owner","workflowId":"uZoMMZYsvpgIUMMa","projectId":"ixpNRE1B5DSjZ1fx"}],"tags":[]}]